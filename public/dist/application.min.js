"use strict";var ApplicationConfiguration=function(){var applicationModuleName="emmauswalkhousingandregistration",applicationModuleVendorDependencies=["ngResource","ngCookies","ui.router","ui.bootstrap","ui.utils","ngTable","formly","formlyBootstrap"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("whole-team-lists",["core"]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("ngReallyClick",["$modal",function($modal){var ModalInstanceCtrl=["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}];return{restrict:"A",scope:{ngReallyClick:"&"},link:function(scope,element,attrs){element.bind("click",function(){var message=attrs.ngReallyMessage||"Are you sure ?",modalHtml='<div class="modal-body">'+message+"</div>";modalHtml+='<div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-warning" ng-click="cancel()">Cancel</button></div>';var modalInstance=$modal.open({template:modalHtml,controller:ModalInstanceCtrl});modalInstance.result.then(function(){scope.ngReallyClick()},function(){})})}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),function(){function factory(ngTableParams){var getData=function(Entity){return function($defer,params){Entity.get(params.url(),function(response){params.total(response.total),$defer.resolve(response.results)})}},params={page:1,count:5},settings={total:0,counts:[5,10,15],filterDelay:0},tableParams=new ngTableParams(params,settings),getParams=function(Entity){return tableParams.settings({getData:getData(Entity)}),tableParams},service={getParams:getParams};return service}angular.module("core").factory("TableSettings",factory),factory.$inject=["ngTableParams"]}(),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("whole-team-lists").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Whole team lists","whole-team-lists","dropdown","/whole-team-lists(/create)?"),Menus.addSubMenuItem("topbar","whole-team-lists","List Whole team lists","whole-team-lists"),Menus.addSubMenuItem("topbar","whole-team-lists","List Paid team lists","paid-team-lists")}]),angular.module("whole-team-lists").config(["$stateProvider",function($stateProvider){$stateProvider.state("listWholeTeamLists",{url:"/whole-team-lists",templateUrl:"modules/whole-team-lists/views/list-whole-team-lists.client.view.html"}).state("listPaidTeamLists",{url:"/paid-team-lists",templateUrl:"modules/whole-team-lists/views/list-paid-team-lists.client.view.html"}).state("createWholeTeamList",{url:"/whole-team-lists/create",templateUrl:"modules/whole-team-lists/views/create-whole-team-list.client.view.html"}).state("viewWholeTeamList",{url:"/whole-team-lists/:wholeTeamListId",templateUrl:"modules/whole-team-lists/views/view-whole-team-list.client.view.html"}).state("editWholeTeamList",{url:"/whole-team-lists/:wholeTeamListId/edit",templateUrl:"modules/whole-team-lists/views/edit-whole-team-list.client.view.html"})}]),angular.module("whole-team-lists").controller("WholeTeamListsController",["$scope","$stateParams","$location","Authentication","WholeTeamLists","TableSettings","WholeTeamListsForm",function($scope,$stateParams,$location,Authentication,WholeTeamLists,TableSettings,WholeTeamListsForm){$scope.authentication=Authentication,$scope.tableParams=TableSettings.getParams(WholeTeamLists),$scope.wholeTeamList={},$scope.setFormFields=function(disabled){$scope.formFields=WholeTeamListsForm.getFormFields(disabled)},$scope.create=function(){var wholeTeamList=new WholeTeamLists($scope.wholeTeamList);wholeTeamList.$save(function(response){$location.path("whole-team-lists/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(wholeTeamList){wholeTeamList?wholeTeamList=WholeTeamLists.get({wholeTeamListId:wholeTeamList._id},function(){wholeTeamList.$remove(),$scope.tableParams.reload()}):$scope.wholeTeamList.$remove(function(){$location.path("wholeTeamLists")})},$scope.update=function(){var wholeTeamList=$scope.wholeTeamList;wholeTeamList.$update(function(){$location.path("whole-team-lists/"+wholeTeamList._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.toViewWholeTeamList=function(){$scope.wholeTeamList=WholeTeamLists.get({wholeTeamListId:$stateParams.wholeTeamListId}),$scope.setFormFields(!0)},$scope.toEditWholeTeamList=function(){$scope.wholeTeamList=WholeTeamLists.get({wholeTeamListId:$stateParams.wholeTeamListId}),$scope.setFormFields(!1)}}]),angular.module("whole-team-lists").factory("WholeTeamLists",["$resource",function($resource){return $resource("whole-team-lists/:wholeTeamListId",{wholeTeamListId:"@_id"},{update:{method:"PUT"}})}]),function(){function factory(){var getFormFields=function(disabled){var fields=[{key:"Name",type:"input",templateOptions:{label:"Name:",disabled:disabled}},{key:"Committee",type:"input",templateOptions:{label:"Committee:",disabled:disabled}},{key:"Chairperson",type:"input",templateOptions:{label:"Chairperson:",disabled:disabled}},{key:"Talk",type:"input",templateOptions:{label:"Talk:",disabled:disabled}},{key:"Phone",type:"input",templateOptions:{label:"Phone:",disabled:disabled}},{key:"Email",type:"input",templateOptions:{label:"Email:",disabled:disabled}},{key:"Street_Address",type:"input",templateOptions:{label:"Street Address:",disabled:disabled}},{key:"City_State_Zip",type:"input",templateOptions:{label:"City, State, Zip:",disabled:disabled}},{key:"Paid",type:"radio",templateOptions:{label:"Paid:",disabled:disabled,options:[{name:"Yes",value:"Yes"},{name:"No",value:"No"}]}},{key:"PaidAmount",type:"input",templateOptions:{label:"Paid Amount:",disabled:disabled}},{key:"Roommate",type:"input",templateOptions:{label:"Roommate:",disabled:disabled}},{key:"Building",type:"select",templateOptions:{label:"Building:",disabled:disabled,options:[{name:"Retreat Center",value:"Retreat Center"},{name:"Campers",value:"Campers"},{name:"None",value:"None"},{name:"Main Lodge - East Wing",value:"Main Lodge - East Wing"}]}}];return fields},service={getFormFields:getFormFields};return service}angular.module("whole-team-lists").factory("WholeTeamListsForm",factory)}();